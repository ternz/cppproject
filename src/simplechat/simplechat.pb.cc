// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimpleChat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SimpleChat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace simplechat {
class HeartBeatRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatRequest> {
} _HeartBeatRequest_default_instance_;
class HeartBeatResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatResponse> {
} _HeartBeatResponse_default_instance_;
class CommonResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonResponse> {
} _CommonResponse_default_instance_;
class LoginRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> {
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> {
} _LoginResponse_default_instance_;
class LogoutRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogoutRequest> {
} _LogoutRequest_default_instance_;
class LogoutResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogoutResponse> {
} _LogoutResponse_default_instance_;
class MessageSendRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MessageSendRequest> {
} _MessageSendRequest_default_instance_;
class MessageSendResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MessageSendResponse> {
} _MessageSendResponse_default_instance_;
class MessageRecvDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MessageRecv> {
} _MessageRecv_default_instance_;
class SomeoneEnterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SomeoneEnter> {
} _SomeoneEnter_default_instance_;
class SomeoneLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SomeoneLeave> {
} _SomeoneLeave_default_instance_;
class ListRoomRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListRoomRequest> {
} _ListRoomRequest_default_instance_;
class ListRoomResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ListRoomResponse> {
} _ListRoomResponse_default_instance_;

namespace protobuf_SimpleChat_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatRequest, user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatResponse, onlines_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, room_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, onlines_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendRequest, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendRequest, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendRequest, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendRequest, time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageSendResponse, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecv, sender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecv, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecv, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageRecv, time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeoneEnter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeoneEnter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeoneEnter, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeoneEnter, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeoneLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeoneLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeoneLeave, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SomeoneLeave, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomRequest, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomRequest, room_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomResponse, room_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomResponse, onlines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomResponse, user_),
  0,
  1,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(HeartBeatRequest)},
  { 6, 12, sizeof(HeartBeatResponse)},
  { 14, 20, sizeof(CommonResponse)},
  { 22, 28, sizeof(LoginRequest)},
  { 30, 37, sizeof(LoginResponse)},
  { 40, 45, sizeof(LogoutRequest)},
  { 46, 52, sizeof(LogoutResponse)},
  { 54, 62, sizeof(MessageSendRequest)},
  { 66, 72, sizeof(MessageSendResponse)},
  { 74, 82, sizeof(MessageRecv)},
  { 86, 92, sizeof(SomeoneEnter)},
  { 94, 100, sizeof(SomeoneLeave)},
  { 102, 108, sizeof(ListRoomRequest)},
  { 110, 117, sizeof(ListRoomResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartBeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartBeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogoutRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogoutResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MessageSendRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MessageSendResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MessageRecv_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SomeoneEnter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SomeoneLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListRoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListRoomResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "SimpleChat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _HeartBeatRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _HeartBeatResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CommonResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LoginRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LoginResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _LogoutRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _LogoutResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MessageSendRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _MessageSendResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _MessageRecv_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SomeoneEnter_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SomeoneLeave_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ListRoomRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ListRoomResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _HeartBeatRequest_default_instance_.DefaultConstruct();
  _HeartBeatResponse_default_instance_.DefaultConstruct();
  _CommonResponse_default_instance_.DefaultConstruct();
  _LoginRequest_default_instance_.DefaultConstruct();
  _LoginResponse_default_instance_.DefaultConstruct();
  _LogoutRequest_default_instance_.DefaultConstruct();
  _LogoutResponse_default_instance_.DefaultConstruct();
  _MessageSendRequest_default_instance_.DefaultConstruct();
  _MessageSendResponse_default_instance_.DefaultConstruct();
  _MessageRecv_default_instance_.DefaultConstruct();
  _SomeoneEnter_default_instance_.DefaultConstruct();
  _SomeoneLeave_default_instance_.DefaultConstruct();
  _ListRoomRequest_default_instance_.DefaultConstruct();
  _ListRoomResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020SimpleChat.proto\022\nsimplechat\" \n\020HeartB"
      "eatRequest\022\014\n\004user\030\001 \002(\t\"L\n\021HeartBeatRes"
      "ponse\022&\n\006status\030\001 \002(\0162\026.simplechat.UserS"
      "tatus\022\017\n\007onlines\030\002 \002(\005\"F\n\016CommonResponse"
      "\022#\n\004code\030\001 \002(\0162\025.simplechat.ErrorCode\022\017\n"
      "\007message\030\002 \001(\t\"*\n\014LoginRequest\022\014\n\004user\030\001"
      " \002(\t\022\014\n\004room\030\002 \002(\t\"V\n\rLoginResponse\022#\n\004c"
      "ode\030\001 \002(\0162\025.simplechat.ErrorCode\022\017\n\007mess"
      "age\030\002 \002(\t\022\017\n\007onlines\030\003 \002(\005\"\035\n\rLogoutRequ"
      "est\022\014\n\004user\030\001 \002(\t\"F\n\016LogoutResponse\022#\n\004c"
      "ode\030\001 \002(\0162\025.simplechat.ErrorCode\022\017\n\007mess"
      "age\030\002 \001(\t\"O\n\022MessageSendRequest\022\014\n\004user\030"
      "\001 \002(\t\022\014\n\004room\030\002 \002(\t\022\017\n\007message\030\003 \002(\t\022\014\n\004"
      "time\030\004 \002(\004\"K\n\023MessageSendResponse\022#\n\004cod"
      "e\030\001 \002(\0162\025.simplechat.ErrorCode\022\017\n\007messag"
      "e\030\002 \001(\t\"J\n\013MessageRecv\022\016\n\006sender\030\001 \002(\t\022\014"
      "\n\004room\030\002 \002(\t\022\017\n\007message\030\003 \002(\t\022\014\n\004time\030\004 "
      "\002(\004\"*\n\014SomeoneEnter\022\014\n\004user\030\001 \002(\t\022\014\n\004tim"
      "e\030\002 \002(\004\"*\n\014SomeoneLeave\022\014\n\004user\030\001 \002(\t\022\014\n"
      "\004time\030\002 \002(\004\"-\n\017ListRoomRequest\022\014\n\004user\030\001"
      " \002(\t\022\014\n\004room\030\002 \002(\t\"\?\n\020ListRoomResponse\022\014"
      "\n\004room\030\001 \002(\t\022\017\n\007onlines\030\002 \002(\005\022\014\n\004user\030\003 "
      "\003(\t*\340\001\n\013MessageType\022\021\n\rHEARTBEAT_REQ\020\000\022\021"
      "\n\rHEARTBEAT_RSP\020\001\022\r\n\tLOGIN_REQ\020\002\022\r\n\tLOGI"
      "N_RSP\020\003\022\016\n\nLOGOUT_REQ\020\004\022\016\n\nLOGOUT_RSP\020\005\022"
      "\023\n\017MESSAGESEND_REQ\020\006\022\023\n\017MESSAGESEND_RSP\020"
      "\007\022\017\n\013MESSAGERECV\020\010\022\020\n\014SOMEONEENTER\020\t\022\020\n\014"
      "SOMEONELEAVE\020\n\022\016\n\nCOMMON_RSP\020\013*\267\001\n\tError"
      "Code\022\013\n\007SUCCESS\020\000\022\027\n\023PARSE_MESSAGE_ERROR"
      "\020\001\022\033\n\027SERIALIZE_MESSAGE_ERROR\020\002\022\033\n\027NOT_S"
      "EPORT_MESSAGE_TYPE\020\003\022\030\n\024INVALID_USER_OR_"
      "ROOM\020\004\022\026\n\022USER_ALREADY_LOGIN\020\005\022\030\n\024INVALI"
      "D_MESSAGE_TYPE\020\006*%\n\nUserStatus\022\013\n\007OFFLIN"
      "E\020\000\022\n\n\006ONLINE\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SimpleChat.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_SimpleChat_2eproto

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_enum_descriptors[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_enum_descriptors[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserStatus_descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_enum_descriptors[2];
}
bool UserStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatRequest::HeartBeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.HeartBeatRequest)
}
HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:simplechat.HeartBeatRequest)
}

void HeartBeatRequest::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:simplechat.HeartBeatRequest)
  SharedDtor();
}

void HeartBeatRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeartBeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatRequest::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[0].descriptor;
}

const HeartBeatRequest& HeartBeatRequest::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeatRequest* HeartBeatRequest::New(::google::protobuf::Arena* arena) const {
  HeartBeatRequest* n = new HeartBeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.HeartBeatRequest)
  if (has_user()) {
    GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.HeartBeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.HeartBeatRequest.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.HeartBeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.HeartBeatRequest)
  return false;
#undef DO_
}

void HeartBeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.HeartBeatRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.HeartBeatRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.HeartBeatRequest)
}

::google::protobuf::uint8* HeartBeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.HeartBeatRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.HeartBeatRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.HeartBeatRequest)
  return target;
}

size_t HeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.HeartBeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string user = 1;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.HeartBeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.HeartBeatRequest)
    MergeFrom(*source);
  }
}

void HeartBeatRequest::MergeFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    set_has_user();
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void HeartBeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HeartBeatRequest::Swap(HeartBeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  user_.Swap(&other->user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatRequest::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatRequest

// required string user = 1;
bool HeartBeatRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartBeatRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartBeatRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartBeatRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& HeartBeatRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.HeartBeatRequest.user)
  return user_.GetNoArena();
}
void HeartBeatRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.HeartBeatRequest.user)
}
#if LANG_CXX11
void HeartBeatRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.HeartBeatRequest.user)
}
#endif
void HeartBeatRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.HeartBeatRequest.user)
}
void HeartBeatRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.HeartBeatRequest.user)
}
::std::string* HeartBeatRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.HeartBeatRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HeartBeatRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.HeartBeatRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HeartBeatRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.HeartBeatRequest.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatResponse::kStatusFieldNumber;
const int HeartBeatResponse::kOnlinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatResponse::HeartBeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.HeartBeatResponse)
}
HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&onlines_) -
    reinterpret_cast<char*>(&status_) + sizeof(onlines_));
  // @@protoc_insertion_point(copy_constructor:simplechat.HeartBeatResponse)
}

void HeartBeatResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&status_, 0, reinterpret_cast<char*>(&onlines_) -
    reinterpret_cast<char*>(&status_) + sizeof(onlines_));
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:simplechat.HeartBeatResponse)
  SharedDtor();
}

void HeartBeatResponse::SharedDtor() {
}

void HeartBeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatResponse::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[1].descriptor;
}

const HeartBeatResponse& HeartBeatResponse::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartBeatResponse* HeartBeatResponse::New(::google::protobuf::Arena* arena) const {
  HeartBeatResponse* n = new HeartBeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.HeartBeatResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&status_, 0, reinterpret_cast<char*>(&onlines_) -
      reinterpret_cast<char*>(&status_) + sizeof(onlines_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.HeartBeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .simplechat.UserStatus status = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::simplechat::UserStatus_IsValid(value)) {
            set_status(static_cast< ::simplechat::UserStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 onlines = 2;
      case 2: {
        if (tag == 16u) {
          set_has_onlines();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.HeartBeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.HeartBeatResponse)
  return false;
#undef DO_
}

void HeartBeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.HeartBeatResponse)
  // required .simplechat.UserStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required int32 onlines = 2;
  if (has_onlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onlines(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.HeartBeatResponse)
}

::google::protobuf::uint8* HeartBeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.HeartBeatResponse)
  // required .simplechat.UserStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required int32 onlines = 2;
  if (has_onlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onlines(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.HeartBeatResponse)
  return target;
}

size_t HeartBeatResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simplechat.HeartBeatResponse)
  size_t total_size = 0;

  if (has_status()) {
    // required .simplechat.UserStatus status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_onlines()) {
    // required int32 onlines = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->onlines());
  }

  return total_size;
}
size_t HeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.HeartBeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .simplechat.UserStatus status = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required int32 onlines = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->onlines());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.HeartBeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.HeartBeatResponse)
    MergeFrom(*source);
  }
}

void HeartBeatResponse::MergeFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_onlines()) {
      set_onlines(from.onlines());
    }
  }
}

void HeartBeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HeartBeatResponse::Swap(HeartBeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatResponse::InternalSwap(HeartBeatResponse* other) {
  std::swap(status_, other->status_);
  std::swap(onlines_, other->onlines_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeatResponse::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatResponse

// required .simplechat.UserStatus status = 1;
bool HeartBeatResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartBeatResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartBeatResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartBeatResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::simplechat::UserStatus HeartBeatResponse::status() const {
  // @@protoc_insertion_point(field_get:simplechat.HeartBeatResponse.status)
  return static_cast< ::simplechat::UserStatus >(status_);
}
void HeartBeatResponse::set_status(::simplechat::UserStatus value) {
  assert(::simplechat::UserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:simplechat.HeartBeatResponse.status)
}

// required int32 onlines = 2;
bool HeartBeatResponse::has_onlines() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeartBeatResponse::set_has_onlines() {
  _has_bits_[0] |= 0x00000002u;
}
void HeartBeatResponse::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeartBeatResponse::clear_onlines() {
  onlines_ = 0;
  clear_has_onlines();
}
::google::protobuf::int32 HeartBeatResponse::onlines() const {
  // @@protoc_insertion_point(field_get:simplechat.HeartBeatResponse.onlines)
  return onlines_;
}
void HeartBeatResponse::set_onlines(::google::protobuf::int32 value) {
  set_has_onlines();
  onlines_ = value;
  // @@protoc_insertion_point(field_set:simplechat.HeartBeatResponse.onlines)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonResponse::kCodeFieldNumber;
const int CommonResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonResponse::CommonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.CommonResponse)
}
CommonResponse::CommonResponse(const CommonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:simplechat.CommonResponse)
}

void CommonResponse::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

CommonResponse::~CommonResponse() {
  // @@protoc_insertion_point(destructor:simplechat.CommonResponse)
  SharedDtor();
}

void CommonResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonResponse::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[2].descriptor;
}

const CommonResponse& CommonResponse::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonResponse* CommonResponse::New(::google::protobuf::Arena* arena) const {
  CommonResponse* n = new CommonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.CommonResponse)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.CommonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .simplechat.ErrorCode code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::simplechat::ErrorCode_IsValid(value)) {
            set_code(static_cast< ::simplechat::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.CommonResponse.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.CommonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.CommonResponse)
  return false;
#undef DO_
}

void CommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.CommonResponse)
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.CommonResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.CommonResponse)
}

::google::protobuf::uint8* CommonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.CommonResponse)
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.CommonResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.CommonResponse)
  return target;
}

size_t CommonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.CommonResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }
  // optional string message = 2;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.CommonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.CommonResponse)
    MergeFrom(*source);
  }
}

void CommonResponse::MergeFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
}

void CommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResponse::CopyFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CommonResponse::Swap(CommonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonResponse::InternalSwap(CommonResponse* other) {
  message_.Swap(&other->message_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonResponse::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonResponse

// required .simplechat.ErrorCode code = 1;
bool CommonResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CommonResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CommonResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CommonResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
::simplechat::ErrorCode CommonResponse::code() const {
  // @@protoc_insertion_point(field_get:simplechat.CommonResponse.code)
  return static_cast< ::simplechat::ErrorCode >(code_);
}
void CommonResponse::set_code(::simplechat::ErrorCode value) {
  assert(::simplechat::ErrorCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:simplechat.CommonResponse.code)
}

// optional string message = 2;
bool CommonResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CommonResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CommonResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CommonResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CommonResponse::message() const {
  // @@protoc_insertion_point(field_get:simplechat.CommonResponse.message)
  return message_.GetNoArena();
}
void CommonResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.CommonResponse.message)
}
#if LANG_CXX11
void CommonResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.CommonResponse.message)
}
#endif
void CommonResponse::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.CommonResponse.message)
}
void CommonResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.CommonResponse.message)
}
::std::string* CommonResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.CommonResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommonResponse::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.CommonResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommonResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.CommonResponse.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kUserFieldNumber;
const int LoginRequest::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room()) {
    room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
  }
  // @@protoc_insertion_point(copy_constructor:simplechat.LoginRequest)
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:simplechat.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[3].descriptor;
}

const LoginRequest& LoginRequest::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.LoginRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user()) {
      GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_.UnsafeRawStringPointer())->clear();
    }
    if (has_room()) {
      GOOGLE_DCHECK(!room_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*room_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.LoginRequest.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string room = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.LoginRequest.room");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.LoginRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LoginRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LoginRequest.room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.LoginRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LoginRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LoginRequest.room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.LoginRequest)
  return target;
}

size_t LoginRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simplechat.LoginRequest)
  size_t total_size = 0;

  if (has_user()) {
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_room()) {
    // required string room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());
  }

  return total_size;
}
size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.LoginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required string room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_room()) {
      set_has_room();
      room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
    }
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  user_.Swap(&other->user_);
  room_.Swap(&other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// required string user = 1;
bool LoginRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& LoginRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginRequest.user)
  return user_.GetNoArena();
}
void LoginRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LoginRequest.user)
}
#if LANG_CXX11
void LoginRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LoginRequest.user)
}
#endif
void LoginRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LoginRequest.user)
}
void LoginRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LoginRequest.user)
}
::std::string* LoginRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.LoginRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.LoginRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LoginRequest.user)
}

// required string room = 2;
bool LoginRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginRequest::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
const ::std::string& LoginRequest::room() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginRequest.room)
  return room_.GetNoArena();
}
void LoginRequest::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LoginRequest.room)
}
#if LANG_CXX11
void LoginRequest::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LoginRequest.room)
}
#endif
void LoginRequest::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LoginRequest.room)
}
void LoginRequest::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LoginRequest.room)
}
::std::string* LoginRequest::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.LoginRequest.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.LoginRequest.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LoginRequest.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kCodeFieldNumber;
const int LoginResponse::kMessageFieldNumber;
const int LoginResponse::kOnlinesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&code_, &from.code_,
    reinterpret_cast<char*>(&onlines_) -
    reinterpret_cast<char*>(&code_) + sizeof(onlines_));
  // @@protoc_insertion_point(copy_constructor:simplechat.LoginResponse)
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, reinterpret_cast<char*>(&onlines_) -
    reinterpret_cast<char*>(&code_) + sizeof(onlines_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:simplechat.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[4].descriptor;
}

const LoginResponse& LoginResponse::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.LoginResponse)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&code_, 0, reinterpret_cast<char*>(&onlines_) -
      reinterpret_cast<char*>(&code_) + sizeof(onlines_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .simplechat.ErrorCode code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::simplechat::ErrorCode_IsValid(value)) {
            set_code(static_cast< ::simplechat::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.LoginResponse.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 onlines = 3;
      case 3: {
        if (tag == 24u) {
          set_has_onlines();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.LoginResponse)
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LoginResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // required int32 onlines = 3;
  if (has_onlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->onlines(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.LoginResponse)
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LoginResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // required int32 onlines = 3;
  if (has_onlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->onlines(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.LoginResponse)
  return target;
}

size_t LoginResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simplechat.LoginResponse)
  size_t total_size = 0;

  if (has_message()) {
    // required string message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_code()) {
    // required .simplechat.ErrorCode code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }

  if (has_onlines()) {
    // required int32 onlines = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->onlines());
  }

  return total_size;
}
size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.LoginResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string message = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required .simplechat.ErrorCode code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());

    // required int32 onlines = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->onlines());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_onlines()) {
      set_onlines(from.onlines());
    }
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  message_.Swap(&other->message_);
  std::swap(code_, other->code_);
  std::swap(onlines_, other->onlines_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// required .simplechat.ErrorCode code = 1;
bool LoginResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LoginResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void LoginResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void LoginResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
::simplechat::ErrorCode LoginResponse::code() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginResponse.code)
  return static_cast< ::simplechat::ErrorCode >(code_);
}
void LoginResponse::set_code(::simplechat::ErrorCode value) {
  assert(::simplechat::ErrorCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:simplechat.LoginResponse.code)
}

// required string message = 2;
bool LoginResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LoginResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void LoginResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void LoginResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& LoginResponse::message() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginResponse.message)
  return message_.GetNoArena();
}
void LoginResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LoginResponse.message)
}
#if LANG_CXX11
void LoginResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LoginResponse.message)
}
#endif
void LoginResponse::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LoginResponse.message)
}
void LoginResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LoginResponse.message)
}
::std::string* LoginResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.LoginResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.LoginResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LoginResponse.message)
}

// required int32 onlines = 3;
bool LoginResponse::has_onlines() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LoginResponse::set_has_onlines() {
  _has_bits_[0] |= 0x00000004u;
}
void LoginResponse::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000004u;
}
void LoginResponse::clear_onlines() {
  onlines_ = 0;
  clear_has_onlines();
}
::google::protobuf::int32 LoginResponse::onlines() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginResponse.onlines)
  return onlines_;
}
void LoginResponse::set_onlines(::google::protobuf::int32 value) {
  set_has_onlines();
  onlines_ = value;
  // @@protoc_insertion_point(field_set:simplechat.LoginResponse.onlines)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.LogoutRequest)
}
LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:simplechat.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:simplechat.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[5].descriptor;
}

const LogoutRequest& LogoutRequest::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogoutRequest* LogoutRequest::New(::google::protobuf::Arena* arena) const {
  LogoutRequest* n = new LogoutRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.LogoutRequest)
  if (has_user()) {
    GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.LogoutRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.LogoutRequest.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.LogoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.LogoutRequest)
  return false;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.LogoutRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LogoutRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.LogoutRequest)
}

::google::protobuf::uint8* LogoutRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.LogoutRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LogoutRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.LogoutRequest)
  return target;
}

size_t LogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.LogoutRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string user = 1;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.LogoutRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.LogoutRequest)
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    set_has_user();
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRequest::InternalSwap(LogoutRequest* other) {
  user_.Swap(&other->user_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutRequest

// required string user = 1;
bool LogoutRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogoutRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void LogoutRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogoutRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& LogoutRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.LogoutRequest.user)
  return user_.GetNoArena();
}
void LogoutRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LogoutRequest.user)
}
#if LANG_CXX11
void LogoutRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LogoutRequest.user)
}
#endif
void LogoutRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LogoutRequest.user)
}
void LogoutRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LogoutRequest.user)
}
::std::string* LogoutRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.LogoutRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogoutRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.LogoutRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogoutRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LogoutRequest.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutResponse::kCodeFieldNumber;
const int LogoutResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutResponse::LogoutResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.LogoutResponse)
}
LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:simplechat.LogoutResponse)
}

void LogoutResponse::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:simplechat.LogoutResponse)
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResponse::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[6].descriptor;
}

const LogoutResponse& LogoutResponse::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogoutResponse* LogoutResponse::New(::google::protobuf::Arena* arena) const {
  LogoutResponse* n = new LogoutResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.LogoutResponse)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.LogoutResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .simplechat.ErrorCode code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::simplechat::ErrorCode_IsValid(value)) {
            set_code(static_cast< ::simplechat::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.LogoutResponse.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.LogoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.LogoutResponse)
  return false;
#undef DO_
}

void LogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.LogoutResponse)
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LogoutResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.LogoutResponse)
}

::google::protobuf::uint8* LogoutResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.LogoutResponse)
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.LogoutResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.LogoutResponse)
  return target;
}

size_t LogoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.LogoutResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }
  // optional string message = 2;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.LogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.LogoutResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.LogoutResponse)
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.LogoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
}

void LogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void LogoutResponse::Swap(LogoutResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutResponse::InternalSwap(LogoutResponse* other) {
  message_.Swap(&other->message_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutResponse::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutResponse

// required .simplechat.ErrorCode code = 1;
bool LogoutResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogoutResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void LogoutResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogoutResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
::simplechat::ErrorCode LogoutResponse::code() const {
  // @@protoc_insertion_point(field_get:simplechat.LogoutResponse.code)
  return static_cast< ::simplechat::ErrorCode >(code_);
}
void LogoutResponse::set_code(::simplechat::ErrorCode value) {
  assert(::simplechat::ErrorCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:simplechat.LogoutResponse.code)
}

// optional string message = 2;
bool LogoutResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogoutResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void LogoutResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogoutResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& LogoutResponse::message() const {
  // @@protoc_insertion_point(field_get:simplechat.LogoutResponse.message)
  return message_.GetNoArena();
}
void LogoutResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LogoutResponse.message)
}
#if LANG_CXX11
void LogoutResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LogoutResponse.message)
}
#endif
void LogoutResponse::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LogoutResponse.message)
}
void LogoutResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LogoutResponse.message)
}
::std::string* LogoutResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.LogoutResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogoutResponse::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.LogoutResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogoutResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LogoutResponse.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageSendRequest::kUserFieldNumber;
const int MessageSendRequest::kRoomFieldNumber;
const int MessageSendRequest::kMessageFieldNumber;
const int MessageSendRequest::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageSendRequest::MessageSendRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.MessageSendRequest)
}
MessageSendRequest::MessageSendRequest(const MessageSendRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room()) {
    room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:simplechat.MessageSendRequest)
}

void MessageSendRequest::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

MessageSendRequest::~MessageSendRequest() {
  // @@protoc_insertion_point(destructor:simplechat.MessageSendRequest)
  SharedDtor();
}

void MessageSendRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageSendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageSendRequest::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[7].descriptor;
}

const MessageSendRequest& MessageSendRequest::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

MessageSendRequest* MessageSendRequest::New(::google::protobuf::Arena* arena) const {
  MessageSendRequest* n = new MessageSendRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.MessageSendRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_user()) {
      GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_.UnsafeRawStringPointer())->clear();
    }
    if (has_room()) {
      GOOGLE_DCHECK(!room_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*room_.UnsafeRawStringPointer())->clear();
    }
    if (has_message()) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageSendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.MessageSendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.MessageSendRequest.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string room = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.MessageSendRequest.room");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.MessageSendRequest.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 4;
      case 4: {
        if (tag == 32u) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.MessageSendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.MessageSendRequest)
  return false;
#undef DO_
}

void MessageSendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.MessageSendRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageSendRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageSendRequest.room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageSendRequest.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // required uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.MessageSendRequest)
}

::google::protobuf::uint8* MessageSendRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.MessageSendRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageSendRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageSendRequest.room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageSendRequest.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // required uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.MessageSendRequest)
  return target;
}

size_t MessageSendRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simplechat.MessageSendRequest)
  size_t total_size = 0;

  if (has_user()) {
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_room()) {
    // required string room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());
  }

  if (has_message()) {
    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_time()) {
    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t MessageSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.MessageSendRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required string room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());

    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageSendRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.MessageSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageSendRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageSendRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.MessageSendRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.MessageSendRequest)
    MergeFrom(*source);
  }
}

void MessageSendRequest::MergeFrom(const MessageSendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.MessageSendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_room()) {
      set_has_room();
      room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void MessageSendRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.MessageSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageSendRequest::CopyFrom(const MessageSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.MessageSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageSendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MessageSendRequest::Swap(MessageSendRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageSendRequest::InternalSwap(MessageSendRequest* other) {
  user_.Swap(&other->user_);
  room_.Swap(&other->room_);
  message_.Swap(&other->message_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageSendRequest::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageSendRequest

// required string user = 1;
bool MessageSendRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageSendRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageSendRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageSendRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& MessageSendRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendRequest.user)
  return user_.GetNoArena();
}
void MessageSendRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageSendRequest.user)
}
#if LANG_CXX11
void MessageSendRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageSendRequest.user)
}
#endif
void MessageSendRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageSendRequest.user)
}
void MessageSendRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageSendRequest.user)
}
::std::string* MessageSendRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageSendRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageSendRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.MessageSendRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageSendRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageSendRequest.user)
}

// required string room = 2;
bool MessageSendRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageSendRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageSendRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageSendRequest::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
const ::std::string& MessageSendRequest::room() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendRequest.room)
  return room_.GetNoArena();
}
void MessageSendRequest::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageSendRequest.room)
}
#if LANG_CXX11
void MessageSendRequest::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageSendRequest.room)
}
#endif
void MessageSendRequest::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageSendRequest.room)
}
void MessageSendRequest::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageSendRequest.room)
}
::std::string* MessageSendRequest::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageSendRequest.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageSendRequest::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.MessageSendRequest.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageSendRequest::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageSendRequest.room)
}

// required string message = 3;
bool MessageSendRequest::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageSendRequest::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
void MessageSendRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void MessageSendRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& MessageSendRequest::message() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendRequest.message)
  return message_.GetNoArena();
}
void MessageSendRequest::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageSendRequest.message)
}
#if LANG_CXX11
void MessageSendRequest::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageSendRequest.message)
}
#endif
void MessageSendRequest::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageSendRequest.message)
}
void MessageSendRequest::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageSendRequest.message)
}
::std::string* MessageSendRequest::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageSendRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageSendRequest::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.MessageSendRequest.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageSendRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageSendRequest.message)
}

// required uint64 time = 4;
bool MessageSendRequest::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MessageSendRequest::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void MessageSendRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void MessageSendRequest::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 MessageSendRequest::time() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendRequest.time)
  return time_;
}
void MessageSendRequest::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:simplechat.MessageSendRequest.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageSendResponse::kCodeFieldNumber;
const int MessageSendResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageSendResponse::MessageSendResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.MessageSendResponse)
}
MessageSendResponse::MessageSendResponse(const MessageSendResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:simplechat.MessageSendResponse)
}

void MessageSendResponse::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

MessageSendResponse::~MessageSendResponse() {
  // @@protoc_insertion_point(destructor:simplechat.MessageSendResponse)
  SharedDtor();
}

void MessageSendResponse::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageSendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageSendResponse::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[8].descriptor;
}

const MessageSendResponse& MessageSendResponse::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

MessageSendResponse* MessageSendResponse::New(::google::protobuf::Arena* arena) const {
  MessageSendResponse* n = new MessageSendResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.MessageSendResponse)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageSendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.MessageSendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .simplechat.ErrorCode code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::simplechat::ErrorCode_IsValid(value)) {
            set_code(static_cast< ::simplechat::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.MessageSendResponse.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.MessageSendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.MessageSendResponse)
  return false;
#undef DO_
}

void MessageSendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.MessageSendResponse)
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->code(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageSendResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.MessageSendResponse)
}

::google::protobuf::uint8* MessageSendResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.MessageSendResponse)
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->code(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageSendResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.MessageSendResponse)
  return target;
}

size_t MessageSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.MessageSendResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .simplechat.ErrorCode code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
  }
  // optional string message = 2;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageSendResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.MessageSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageSendResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageSendResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.MessageSendResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.MessageSendResponse)
    MergeFrom(*source);
  }
}

void MessageSendResponse::MergeFrom(const MessageSendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.MessageSendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
}

void MessageSendResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.MessageSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageSendResponse::CopyFrom(const MessageSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.MessageSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageSendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MessageSendResponse::Swap(MessageSendResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageSendResponse::InternalSwap(MessageSendResponse* other) {
  message_.Swap(&other->message_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageSendResponse::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageSendResponse

// required .simplechat.ErrorCode code = 1;
bool MessageSendResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageSendResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageSendResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageSendResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
::simplechat::ErrorCode MessageSendResponse::code() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendResponse.code)
  return static_cast< ::simplechat::ErrorCode >(code_);
}
void MessageSendResponse::set_code(::simplechat::ErrorCode value) {
  assert(::simplechat::ErrorCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:simplechat.MessageSendResponse.code)
}

// optional string message = 2;
bool MessageSendResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageSendResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageSendResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageSendResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& MessageSendResponse::message() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendResponse.message)
  return message_.GetNoArena();
}
void MessageSendResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageSendResponse.message)
}
#if LANG_CXX11
void MessageSendResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageSendResponse.message)
}
#endif
void MessageSendResponse::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageSendResponse.message)
}
void MessageSendResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageSendResponse.message)
}
::std::string* MessageSendResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageSendResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageSendResponse::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.MessageSendResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageSendResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageSendResponse.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageRecv::kSenderFieldNumber;
const int MessageRecv::kRoomFieldNumber;
const int MessageRecv::kMessageFieldNumber;
const int MessageRecv::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageRecv::MessageRecv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.MessageRecv)
}
MessageRecv::MessageRecv(const MessageRecv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender()) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room()) {
    room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:simplechat.MessageRecv)
}

void MessageRecv::SharedCtor() {
  _cached_size_ = 0;
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

MessageRecv::~MessageRecv() {
  // @@protoc_insertion_point(destructor:simplechat.MessageRecv)
  SharedDtor();
}

void MessageRecv::SharedDtor() {
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageRecv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageRecv::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[9].descriptor;
}

const MessageRecv& MessageRecv::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

MessageRecv* MessageRecv::New(::google::protobuf::Arena* arena) const {
  MessageRecv* n = new MessageRecv;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageRecv::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.MessageRecv)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_sender()) {
      GOOGLE_DCHECK(!sender_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sender_.UnsafeRawStringPointer())->clear();
    }
    if (has_room()) {
      GOOGLE_DCHECK(!room_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*room_.UnsafeRawStringPointer())->clear();
    }
    if (has_message()) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageRecv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.MessageRecv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sender = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.MessageRecv.sender");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string room = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.MessageRecv.room");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.MessageRecv.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 4;
      case 4: {
        if (tag == 32u) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.MessageRecv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.MessageRecv)
  return false;
#undef DO_
}

void MessageRecv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.MessageRecv)
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageRecv.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender(), output);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageRecv.room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageRecv.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // required uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.MessageRecv)
}

::google::protobuf::uint8* MessageRecv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.MessageRecv)
  // required string sender = 1;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageRecv.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sender(), target);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageRecv.room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.MessageRecv.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // required uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.MessageRecv)
  return target;
}

size_t MessageRecv::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simplechat.MessageRecv)
  size_t total_size = 0;

  if (has_sender()) {
    // required string sender = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  if (has_room()) {
    // required string room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());
  }

  if (has_message()) {
    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_time()) {
    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t MessageRecv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.MessageRecv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string sender = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());

    // required string room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());

    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required uint64 time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageRecv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.MessageRecv)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageRecv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageRecv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.MessageRecv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.MessageRecv)
    MergeFrom(*source);
  }
}

void MessageRecv::MergeFrom(const MessageRecv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.MessageRecv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_sender()) {
      set_has_sender();
      sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
    }
    if (from.has_room()) {
      set_has_room();
      room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void MessageRecv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.MessageRecv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRecv::CopyFrom(const MessageRecv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.MessageRecv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRecv::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MessageRecv::Swap(MessageRecv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageRecv::InternalSwap(MessageRecv* other) {
  sender_.Swap(&other->sender_);
  room_.Swap(&other->room_);
  message_.Swap(&other->message_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageRecv::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageRecv

// required string sender = 1;
bool MessageRecv::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageRecv::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageRecv::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageRecv::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender();
}
const ::std::string& MessageRecv::sender() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageRecv.sender)
  return sender_.GetNoArena();
}
void MessageRecv::set_sender(const ::std::string& value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageRecv.sender)
}
#if LANG_CXX11
void MessageRecv::set_sender(::std::string&& value) {
  set_has_sender();
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageRecv.sender)
}
#endif
void MessageRecv::set_sender(const char* value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageRecv.sender)
}
void MessageRecv::set_sender(const char* value, size_t size) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageRecv.sender)
}
::std::string* MessageRecv::mutable_sender() {
  set_has_sender();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageRecv.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageRecv::release_sender() {
  // @@protoc_insertion_point(field_release:simplechat.MessageRecv.sender)
  clear_has_sender();
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageRecv::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageRecv.sender)
}

// required string room = 2;
bool MessageRecv::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageRecv::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageRecv::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageRecv::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
const ::std::string& MessageRecv::room() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageRecv.room)
  return room_.GetNoArena();
}
void MessageRecv::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageRecv.room)
}
#if LANG_CXX11
void MessageRecv::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageRecv.room)
}
#endif
void MessageRecv::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageRecv.room)
}
void MessageRecv::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageRecv.room)
}
::std::string* MessageRecv::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageRecv.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageRecv::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.MessageRecv.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageRecv::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageRecv.room)
}

// required string message = 3;
bool MessageRecv::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageRecv::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
void MessageRecv::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void MessageRecv::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& MessageRecv::message() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageRecv.message)
  return message_.GetNoArena();
}
void MessageRecv::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageRecv.message)
}
#if LANG_CXX11
void MessageRecv::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageRecv.message)
}
#endif
void MessageRecv::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageRecv.message)
}
void MessageRecv::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageRecv.message)
}
::std::string* MessageRecv::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageRecv.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageRecv::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.MessageRecv.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageRecv::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageRecv.message)
}

// required uint64 time = 4;
bool MessageRecv::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MessageRecv::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void MessageRecv::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void MessageRecv::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 MessageRecv::time() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageRecv.time)
  return time_;
}
void MessageRecv::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:simplechat.MessageRecv.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SomeoneEnter::kUserFieldNumber;
const int SomeoneEnter::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SomeoneEnter::SomeoneEnter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.SomeoneEnter)
}
SomeoneEnter::SomeoneEnter(const SomeoneEnter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:simplechat.SomeoneEnter)
}

void SomeoneEnter::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

SomeoneEnter::~SomeoneEnter() {
  // @@protoc_insertion_point(destructor:simplechat.SomeoneEnter)
  SharedDtor();
}

void SomeoneEnter::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SomeoneEnter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SomeoneEnter::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[10].descriptor;
}

const SomeoneEnter& SomeoneEnter::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

SomeoneEnter* SomeoneEnter::New(::google::protobuf::Arena* arena) const {
  SomeoneEnter* n = new SomeoneEnter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SomeoneEnter::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.SomeoneEnter)
  if (has_user()) {
    GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_.UnsafeRawStringPointer())->clear();
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SomeoneEnter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.SomeoneEnter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.SomeoneEnter.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (tag == 16u) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.SomeoneEnter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.SomeoneEnter)
  return false;
#undef DO_
}

void SomeoneEnter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.SomeoneEnter)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.SomeoneEnter.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.SomeoneEnter)
}

::google::protobuf::uint8* SomeoneEnter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.SomeoneEnter)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.SomeoneEnter.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.SomeoneEnter)
  return target;
}

size_t SomeoneEnter::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simplechat.SomeoneEnter)
  size_t total_size = 0;

  if (has_user()) {
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t SomeoneEnter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.SomeoneEnter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SomeoneEnter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.SomeoneEnter)
  GOOGLE_DCHECK_NE(&from, this);
  const SomeoneEnter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SomeoneEnter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.SomeoneEnter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.SomeoneEnter)
    MergeFrom(*source);
  }
}

void SomeoneEnter::MergeFrom(const SomeoneEnter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.SomeoneEnter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void SomeoneEnter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.SomeoneEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SomeoneEnter::CopyFrom(const SomeoneEnter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.SomeoneEnter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SomeoneEnter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SomeoneEnter::Swap(SomeoneEnter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SomeoneEnter::InternalSwap(SomeoneEnter* other) {
  user_.Swap(&other->user_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SomeoneEnter::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SomeoneEnter

// required string user = 1;
bool SomeoneEnter::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SomeoneEnter::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void SomeoneEnter::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void SomeoneEnter::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& SomeoneEnter::user() const {
  // @@protoc_insertion_point(field_get:simplechat.SomeoneEnter.user)
  return user_.GetNoArena();
}
void SomeoneEnter::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.SomeoneEnter.user)
}
#if LANG_CXX11
void SomeoneEnter::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.SomeoneEnter.user)
}
#endif
void SomeoneEnter::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.SomeoneEnter.user)
}
void SomeoneEnter::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.SomeoneEnter.user)
}
::std::string* SomeoneEnter::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.SomeoneEnter.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SomeoneEnter::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.SomeoneEnter.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SomeoneEnter::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.SomeoneEnter.user)
}

// required uint64 time = 2;
bool SomeoneEnter::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SomeoneEnter::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SomeoneEnter::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SomeoneEnter::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 SomeoneEnter::time() const {
  // @@protoc_insertion_point(field_get:simplechat.SomeoneEnter.time)
  return time_;
}
void SomeoneEnter::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:simplechat.SomeoneEnter.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SomeoneLeave::kUserFieldNumber;
const int SomeoneLeave::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SomeoneLeave::SomeoneLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.SomeoneLeave)
}
SomeoneLeave::SomeoneLeave(const SomeoneLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:simplechat.SomeoneLeave)
}

void SomeoneLeave::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
}

SomeoneLeave::~SomeoneLeave() {
  // @@protoc_insertion_point(destructor:simplechat.SomeoneLeave)
  SharedDtor();
}

void SomeoneLeave::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SomeoneLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SomeoneLeave::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[11].descriptor;
}

const SomeoneLeave& SomeoneLeave::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

SomeoneLeave* SomeoneLeave::New(::google::protobuf::Arena* arena) const {
  SomeoneLeave* n = new SomeoneLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SomeoneLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.SomeoneLeave)
  if (has_user()) {
    GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*user_.UnsafeRawStringPointer())->clear();
  }
  time_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SomeoneLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.SomeoneLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.SomeoneLeave.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (tag == 16u) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.SomeoneLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.SomeoneLeave)
  return false;
#undef DO_
}

void SomeoneLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.SomeoneLeave)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.SomeoneLeave.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.SomeoneLeave)
}

::google::protobuf::uint8* SomeoneLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.SomeoneLeave)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.SomeoneLeave.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.SomeoneLeave)
  return target;
}

size_t SomeoneLeave::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simplechat.SomeoneLeave)
  size_t total_size = 0;

  if (has_user()) {
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
size_t SomeoneLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.SomeoneLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SomeoneLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.SomeoneLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const SomeoneLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SomeoneLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.SomeoneLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.SomeoneLeave)
    MergeFrom(*source);
  }
}

void SomeoneLeave::MergeFrom(const SomeoneLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.SomeoneLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
}

void SomeoneLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.SomeoneLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SomeoneLeave::CopyFrom(const SomeoneLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.SomeoneLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SomeoneLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SomeoneLeave::Swap(SomeoneLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SomeoneLeave::InternalSwap(SomeoneLeave* other) {
  user_.Swap(&other->user_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SomeoneLeave::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SomeoneLeave

// required string user = 1;
bool SomeoneLeave::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SomeoneLeave::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void SomeoneLeave::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void SomeoneLeave::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& SomeoneLeave::user() const {
  // @@protoc_insertion_point(field_get:simplechat.SomeoneLeave.user)
  return user_.GetNoArena();
}
void SomeoneLeave::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.SomeoneLeave.user)
}
#if LANG_CXX11
void SomeoneLeave::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.SomeoneLeave.user)
}
#endif
void SomeoneLeave::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.SomeoneLeave.user)
}
void SomeoneLeave::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.SomeoneLeave.user)
}
::std::string* SomeoneLeave::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.SomeoneLeave.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SomeoneLeave::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.SomeoneLeave.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SomeoneLeave::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.SomeoneLeave.user)
}

// required uint64 time = 2;
bool SomeoneLeave::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SomeoneLeave::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void SomeoneLeave::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void SomeoneLeave::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
::google::protobuf::uint64 SomeoneLeave::time() const {
  // @@protoc_insertion_point(field_get:simplechat.SomeoneLeave.time)
  return time_;
}
void SomeoneLeave::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:simplechat.SomeoneLeave.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRoomRequest::kUserFieldNumber;
const int ListRoomRequest::kRoomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRoomRequest::ListRoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.ListRoomRequest)
}
ListRoomRequest::ListRoomRequest(const ListRoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room()) {
    room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
  }
  // @@protoc_insertion_point(copy_constructor:simplechat.ListRoomRequest)
}

void ListRoomRequest::SharedCtor() {
  _cached_size_ = 0;
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ListRoomRequest::~ListRoomRequest() {
  // @@protoc_insertion_point(destructor:simplechat.ListRoomRequest)
  SharedDtor();
}

void ListRoomRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRoomRequest::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[12].descriptor;
}

const ListRoomRequest& ListRoomRequest::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListRoomRequest* ListRoomRequest::New(::google::protobuf::Arena* arena) const {
  ListRoomRequest* n = new ListRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.ListRoomRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_user()) {
      GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_.UnsafeRawStringPointer())->clear();
    }
    if (has_room()) {
      GOOGLE_DCHECK(!room_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*room_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListRoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.ListRoomRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.ListRoomRequest.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string room = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.ListRoomRequest.room");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.ListRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.ListRoomRequest)
  return false;
#undef DO_
}

void ListRoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.ListRoomRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.ListRoomRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.ListRoomRequest.room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.ListRoomRequest)
}

::google::protobuf::uint8* ListRoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.ListRoomRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.ListRoomRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.ListRoomRequest.room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.ListRoomRequest)
  return target;
}

size_t ListRoomRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simplechat.ListRoomRequest)
  size_t total_size = 0;

  if (has_user()) {
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  if (has_room()) {
    // required string room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());
  }

  return total_size;
}
size_t ListRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.ListRoomRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());

    // required string room = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.ListRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.ListRoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.ListRoomRequest)
    MergeFrom(*source);
  }
}

void ListRoomRequest::MergeFrom(const ListRoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.ListRoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_user()) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (from.has_room()) {
      set_has_room();
      room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
    }
  }
}

void ListRoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.ListRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRoomRequest::CopyFrom(const ListRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.ListRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ListRoomRequest::Swap(ListRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRoomRequest::InternalSwap(ListRoomRequest* other) {
  user_.Swap(&other->user_);
  room_.Swap(&other->room_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRoomRequest::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRoomRequest

// required string user = 1;
bool ListRoomRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListRoomRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void ListRoomRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListRoomRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& ListRoomRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomRequest.user)
  return user_.GetNoArena();
}
void ListRoomRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.ListRoomRequest.user)
}
#if LANG_CXX11
void ListRoomRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.ListRoomRequest.user)
}
#endif
void ListRoomRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.ListRoomRequest.user)
}
void ListRoomRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.ListRoomRequest.user)
}
::std::string* ListRoomRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.ListRoomRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListRoomRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.ListRoomRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListRoomRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.ListRoomRequest.user)
}

// required string room = 2;
bool ListRoomRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListRoomRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
void ListRoomRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListRoomRequest::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
const ::std::string& ListRoomRequest::room() const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomRequest.room)
  return room_.GetNoArena();
}
void ListRoomRequest::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.ListRoomRequest.room)
}
#if LANG_CXX11
void ListRoomRequest::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.ListRoomRequest.room)
}
#endif
void ListRoomRequest::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.ListRoomRequest.room)
}
void ListRoomRequest::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.ListRoomRequest.room)
}
::std::string* ListRoomRequest::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.ListRoomRequest.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListRoomRequest::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.ListRoomRequest.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListRoomRequest::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.ListRoomRequest.room)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRoomResponse::kRoomFieldNumber;
const int ListRoomResponse::kOnlinesFieldNumber;
const int ListRoomResponse::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRoomResponse::ListRoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_SimpleChat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:simplechat.ListRoomResponse)
}
ListRoomResponse::ListRoomResponse(const ListRoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_(from.user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_room()) {
    room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
  }
  onlines_ = from.onlines_;
  // @@protoc_insertion_point(copy_constructor:simplechat.ListRoomResponse)
}

void ListRoomResponse::SharedCtor() {
  _cached_size_ = 0;
  room_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  onlines_ = 0;
}

ListRoomResponse::~ListRoomResponse() {
  // @@protoc_insertion_point(destructor:simplechat.ListRoomResponse)
  SharedDtor();
}

void ListRoomResponse::SharedDtor() {
  room_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRoomResponse::descriptor() {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[13].descriptor;
}

const ListRoomResponse& ListRoomResponse::default_instance() {
  protobuf_SimpleChat_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListRoomResponse* ListRoomResponse::New(::google::protobuf::Arena* arena) const {
  ListRoomResponse* n = new ListRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListRoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:simplechat.ListRoomResponse)
  user_.Clear();
  if (has_room()) {
    GOOGLE_DCHECK(!room_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*room_.UnsafeRawStringPointer())->clear();
  }
  onlines_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListRoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simplechat.ListRoomResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.ListRoomResponse.room");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 onlines = 2;
      case 2: {
        if (tag == 16u) {
          set_has_onlines();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string user = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user(this->user_size() - 1).data(),
            this->user(this->user_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "simplechat.ListRoomResponse.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simplechat.ListRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simplechat.ListRoomResponse)
  return false;
#undef DO_
}

void ListRoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simplechat.ListRoomResponse)
  // required string room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.ListRoomResponse.room");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room(), output);
  }

  // required int32 onlines = 2;
  if (has_onlines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onlines(), output);
  }

  // repeated string user = 3;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user(i).data(), this->user(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.ListRoomResponse.user");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simplechat.ListRoomResponse)
}

::google::protobuf::uint8* ListRoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:simplechat.ListRoomResponse)
  // required string room = 1;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.ListRoomResponse.room");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room(), target);
  }

  // required int32 onlines = 2;
  if (has_onlines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onlines(), target);
  }

  // repeated string user = 3;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user(i).data(), this->user(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "simplechat.ListRoomResponse.user");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->user(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simplechat.ListRoomResponse)
  return target;
}

size_t ListRoomResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:simplechat.ListRoomResponse)
  size_t total_size = 0;

  if (has_room()) {
    // required string room = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());
  }

  if (has_onlines()) {
    // required int32 onlines = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->onlines());
  }

  return total_size;
}
size_t ListRoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simplechat.ListRoomResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string room = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room());

    // required int32 onlines = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->onlines());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string user = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->user_size());
  for (int i = 0; i < this->user_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:simplechat.ListRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:simplechat.ListRoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:simplechat.ListRoomResponse)
    MergeFrom(*source);
  }
}

void ListRoomResponse::MergeFrom(const ListRoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simplechat.ListRoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_room()) {
      set_has_room();
      room_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_);
    }
    if (from.has_onlines()) {
      set_onlines(from.onlines());
    }
  }
}

void ListRoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:simplechat.ListRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRoomResponse::CopyFrom(const ListRoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simplechat.ListRoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ListRoomResponse::Swap(ListRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListRoomResponse::InternalSwap(ListRoomResponse* other) {
  user_.UnsafeArenaSwap(&other->user_);
  room_.Swap(&other->room_);
  std::swap(onlines_, other->onlines_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRoomResponse::GetMetadata() const {
  protobuf_SimpleChat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SimpleChat_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListRoomResponse

// required string room = 1;
bool ListRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
void ListRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListRoomResponse::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
const ::std::string& ListRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomResponse.room)
  return room_.GetNoArena();
}
void ListRoomResponse::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.ListRoomResponse.room)
}
#if LANG_CXX11
void ListRoomResponse::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.ListRoomResponse.room)
}
#endif
void ListRoomResponse::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.ListRoomResponse.room)
}
void ListRoomResponse::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.ListRoomResponse.room)
}
::std::string* ListRoomResponse::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.ListRoomResponse.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListRoomResponse::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.ListRoomResponse.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListRoomResponse::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.ListRoomResponse.room)
}

// required int32 onlines = 2;
bool ListRoomResponse::has_onlines() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListRoomResponse::set_has_onlines() {
  _has_bits_[0] |= 0x00000002u;
}
void ListRoomResponse::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListRoomResponse::clear_onlines() {
  onlines_ = 0;
  clear_has_onlines();
}
::google::protobuf::int32 ListRoomResponse::onlines() const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomResponse.onlines)
  return onlines_;
}
void ListRoomResponse::set_onlines(::google::protobuf::int32 value) {
  set_has_onlines();
  onlines_ = value;
  // @@protoc_insertion_point(field_set:simplechat.ListRoomResponse.onlines)
}

// repeated string user = 3;
int ListRoomResponse::user_size() const {
  return user_.size();
}
void ListRoomResponse::clear_user() {
  user_.Clear();
}
const ::std::string& ListRoomResponse::user(int index) const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomResponse.user)
  return user_.Get(index);
}
::std::string* ListRoomResponse::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:simplechat.ListRoomResponse.user)
  return user_.Mutable(index);
}
void ListRoomResponse::set_user(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:simplechat.ListRoomResponse.user)
  user_.Mutable(index)->assign(value);
}
void ListRoomResponse::set_user(int index, const char* value) {
  user_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:simplechat.ListRoomResponse.user)
}
void ListRoomResponse::set_user(int index, const char* value, size_t size) {
  user_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:simplechat.ListRoomResponse.user)
}
::std::string* ListRoomResponse::add_user() {
  // @@protoc_insertion_point(field_add_mutable:simplechat.ListRoomResponse.user)
  return user_.Add();
}
void ListRoomResponse::add_user(const ::std::string& value) {
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:simplechat.ListRoomResponse.user)
}
void ListRoomResponse::add_user(const char* value) {
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:simplechat.ListRoomResponse.user)
}
void ListRoomResponse::add_user(const char* value, size_t size) {
  user_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:simplechat.ListRoomResponse.user)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListRoomResponse::user() const {
  // @@protoc_insertion_point(field_list:simplechat.ListRoomResponse.user)
  return user_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ListRoomResponse::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:simplechat.ListRoomResponse.user)
  return &user_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace simplechat

// @@protoc_insertion_point(global_scope)
