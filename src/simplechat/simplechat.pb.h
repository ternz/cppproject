// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimpleChat.proto

#ifndef PROTOBUF_SimpleChat_2eproto__INCLUDED
#define PROTOBUF_SimpleChat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace simplechat {
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class HeartBeatRequest;
class HeartBeatRequestDefaultTypeInternal;
extern HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
class HeartBeatResponse;
class HeartBeatResponseDefaultTypeInternal;
extern HeartBeatResponseDefaultTypeInternal _HeartBeatResponse_default_instance_;
class ListRoomRequest;
class ListRoomRequestDefaultTypeInternal;
extern ListRoomRequestDefaultTypeInternal _ListRoomRequest_default_instance_;
class ListRoomResponse;
class ListRoomResponseDefaultTypeInternal;
extern ListRoomResponseDefaultTypeInternal _ListRoomResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class MessageRecv;
class MessageRecvDefaultTypeInternal;
extern MessageRecvDefaultTypeInternal _MessageRecv_default_instance_;
class MessageSendRequest;
class MessageSendRequestDefaultTypeInternal;
extern MessageSendRequestDefaultTypeInternal _MessageSendRequest_default_instance_;
class MessageSendResponse;
class MessageSendResponseDefaultTypeInternal;
extern MessageSendResponseDefaultTypeInternal _MessageSendResponse_default_instance_;
class SomeoneEnter;
class SomeoneEnterDefaultTypeInternal;
extern SomeoneEnterDefaultTypeInternal _SomeoneEnter_default_instance_;
class SomeoneLeave;
class SomeoneLeaveDefaultTypeInternal;
extern SomeoneLeaveDefaultTypeInternal _SomeoneLeave_default_instance_;
}  // namespace simplechat

namespace simplechat {

namespace protobuf_SimpleChat_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_SimpleChat_2eproto

enum MessageType {
  HEARTBEAT_REQ = 0,
  HEARTBEAT_RSP = 1,
  LOGIN_REQ = 2,
  LOGIN_RSP = 3,
  LOGOUT_REQ = 4,
  LOGOUT_RSP = 5,
  MESSAGESEND_REQ = 6,
  MESSAGESEND_RSP = 7,
  MESSAGERECV = 8,
  SOMEONEENTER = 9,
  SOMEONELEAVE = 10,
  COMMON_RSP = 11
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = HEARTBEAT_REQ;
const MessageType MessageType_MAX = COMMON_RSP;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ErrorCode {
  SUCCESS = 0,
  PARSE_MESSAGE_ERROR = 1,
  SERIALIZE_MESSAGE_ERROR = 2,
  NOT_SEPORT_MESSAGE_TYPE = 3,
  INVALID_USER_OR_ROOM = 4,
  USER_ALREADY_LOGIN = 5,
  INVALID_MESSAGE_TYPE = 6
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = SUCCESS;
const ErrorCode ErrorCode_MAX = INVALID_MESSAGE_TYPE;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum UserStatus {
  OFFLINE = 0,
  ONLINE = 1
};
bool UserStatus_IsValid(int value);
const UserStatus UserStatus_MIN = OFFLINE;
const UserStatus UserStatus_MAX = ONLINE;
const int UserStatus_ARRAYSIZE = UserStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserStatus_descriptor();
inline const ::std::string& UserStatus_Name(UserStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserStatus_descriptor(), value);
}
inline bool UserStatus_Parse(
    const ::std::string& name, UserStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserStatus>(
    UserStatus_descriptor(), name, value);
}
// ===================================================================

class HeartBeatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.HeartBeatRequest) */ {
 public:
  HeartBeatRequest();
  virtual ~HeartBeatRequest();

  HeartBeatRequest(const HeartBeatRequest& from);

  inline HeartBeatRequest& operator=(const HeartBeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatRequest& default_instance();

  static inline const HeartBeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartBeatRequest*>(
               &_HeartBeatRequest_default_instance_);
  }

  void Swap(HeartBeatRequest* other);

  // implements Message ----------------------------------------------

  inline HeartBeatRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartBeatRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartBeatRequest& from);
  void MergeFrom(const HeartBeatRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartBeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:simplechat.HeartBeatRequest)
 private:
  void set_has_user();
  void clear_has_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartBeatResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.HeartBeatResponse) */ {
 public:
  HeartBeatResponse();
  virtual ~HeartBeatResponse();

  HeartBeatResponse(const HeartBeatResponse& from);

  inline HeartBeatResponse& operator=(const HeartBeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatResponse& default_instance();

  static inline const HeartBeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartBeatResponse*>(
               &_HeartBeatResponse_default_instance_);
  }

  void Swap(HeartBeatResponse* other);

  // implements Message ----------------------------------------------

  inline HeartBeatResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  HeartBeatResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HeartBeatResponse& from);
  void MergeFrom(const HeartBeatResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HeartBeatResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .simplechat.UserStatus status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::simplechat::UserStatus status() const;
  void set_status(::simplechat::UserStatus value);

  // required int32 onlines = 2;
  bool has_onlines() const;
  void clear_onlines();
  static const int kOnlinesFieldNumber = 2;
  ::google::protobuf::int32 onlines() const;
  void set_onlines(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:simplechat.HeartBeatResponse)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_onlines();
  void clear_has_onlines();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int status_;
  ::google::protobuf::int32 onlines_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.CommonResponse) */ {
 public:
  CommonResponse();
  virtual ~CommonResponse();

  CommonResponse(const CommonResponse& from);

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonResponse& default_instance();

  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }

  void Swap(CommonResponse* other);

  // implements Message ----------------------------------------------

  inline CommonResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required .simplechat.ErrorCode code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::simplechat::ErrorCode code() const;
  void set_code(::simplechat::ErrorCode value);

  // @@protoc_insertion_point(class_scope:simplechat.CommonResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // required string room = 2;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 2;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  #if LANG_CXX11
  void set_room(::std::string&& value);
  #endif
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // @@protoc_insertion_point(class_scope:simplechat.LoginRequest)
 private:
  void set_has_user();
  void clear_has_user();
  void set_has_room();
  void clear_has_room();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required .simplechat.ErrorCode code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::simplechat::ErrorCode code() const;
  void set_code(::simplechat::ErrorCode value);

  // required int32 onlines = 3;
  bool has_onlines() const;
  void clear_onlines();
  static const int kOnlinesFieldNumber = 3;
  ::google::protobuf::int32 onlines() const;
  void set_onlines(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:simplechat.LoginResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_message();
  void clear_has_message();
  void set_has_onlines();
  void clear_has_onlines();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  ::google::protobuf::int32 onlines_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRequest& default_instance();

  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }

  void Swap(LogoutRequest* other);

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:simplechat.LogoutRequest)
 private:
  void set_has_user();
  void clear_has_user();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutResponse& default_instance();

  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }

  void Swap(LogoutResponse* other);

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required .simplechat.ErrorCode code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::simplechat::ErrorCode code() const;
  void set_code(::simplechat::ErrorCode value);

  // @@protoc_insertion_point(class_scope:simplechat.LogoutResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageSendRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.MessageSendRequest) */ {
 public:
  MessageSendRequest();
  virtual ~MessageSendRequest();

  MessageSendRequest(const MessageSendRequest& from);

  inline MessageSendRequest& operator=(const MessageSendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageSendRequest& default_instance();

  static inline const MessageSendRequest* internal_default_instance() {
    return reinterpret_cast<const MessageSendRequest*>(
               &_MessageSendRequest_default_instance_);
  }

  void Swap(MessageSendRequest* other);

  // implements Message ----------------------------------------------

  inline MessageSendRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageSendRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageSendRequest& from);
  void MergeFrom(const MessageSendRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageSendRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // required string room = 2;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 2;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  #if LANG_CXX11
  void set_room(::std::string&& value);
  #endif
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // required string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required uint64 time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:simplechat.MessageSendRequest)
 private:
  void set_has_user();
  void clear_has_user();
  void set_has_room();
  void clear_has_room();
  void set_has_message();
  void clear_has_message();
  void set_has_time();
  void clear_has_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint64 time_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageSendResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.MessageSendResponse) */ {
 public:
  MessageSendResponse();
  virtual ~MessageSendResponse();

  MessageSendResponse(const MessageSendResponse& from);

  inline MessageSendResponse& operator=(const MessageSendResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageSendResponse& default_instance();

  static inline const MessageSendResponse* internal_default_instance() {
    return reinterpret_cast<const MessageSendResponse*>(
               &_MessageSendResponse_default_instance_);
  }

  void Swap(MessageSendResponse* other);

  // implements Message ----------------------------------------------

  inline MessageSendResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageSendResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageSendResponse& from);
  void MergeFrom(const MessageSendResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageSendResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required .simplechat.ErrorCode code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::simplechat::ErrorCode code() const;
  void set_code(::simplechat::ErrorCode value);

  // @@protoc_insertion_point(class_scope:simplechat.MessageSendResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_message();
  void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageRecv : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.MessageRecv) */ {
 public:
  MessageRecv();
  virtual ~MessageRecv();

  MessageRecv(const MessageRecv& from);

  inline MessageRecv& operator=(const MessageRecv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageRecv& default_instance();

  static inline const MessageRecv* internal_default_instance() {
    return reinterpret_cast<const MessageRecv*>(
               &_MessageRecv_default_instance_);
  }

  void Swap(MessageRecv* other);

  // implements Message ----------------------------------------------

  inline MessageRecv* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageRecv* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageRecv& from);
  void MergeFrom(const MessageRecv& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageRecv* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sender = 1;
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 1;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // required string room = 2;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 2;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  #if LANG_CXX11
  void set_room(::std::string&& value);
  #endif
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // required string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required uint64 time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:simplechat.MessageRecv)
 private:
  void set_has_sender();
  void clear_has_sender();
  void set_has_room();
  void clear_has_room();
  void set_has_message();
  void clear_has_message();
  void set_has_time();
  void clear_has_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::uint64 time_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SomeoneEnter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.SomeoneEnter) */ {
 public:
  SomeoneEnter();
  virtual ~SomeoneEnter();

  SomeoneEnter(const SomeoneEnter& from);

  inline SomeoneEnter& operator=(const SomeoneEnter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SomeoneEnter& default_instance();

  static inline const SomeoneEnter* internal_default_instance() {
    return reinterpret_cast<const SomeoneEnter*>(
               &_SomeoneEnter_default_instance_);
  }

  void Swap(SomeoneEnter* other);

  // implements Message ----------------------------------------------

  inline SomeoneEnter* New() const PROTOBUF_FINAL { return New(NULL); }

  SomeoneEnter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SomeoneEnter& from);
  void MergeFrom(const SomeoneEnter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SomeoneEnter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // required uint64 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:simplechat.SomeoneEnter)
 private:
  void set_has_user();
  void clear_has_user();
  void set_has_time();
  void clear_has_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::uint64 time_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SomeoneLeave : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.SomeoneLeave) */ {
 public:
  SomeoneLeave();
  virtual ~SomeoneLeave();

  SomeoneLeave(const SomeoneLeave& from);

  inline SomeoneLeave& operator=(const SomeoneLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SomeoneLeave& default_instance();

  static inline const SomeoneLeave* internal_default_instance() {
    return reinterpret_cast<const SomeoneLeave*>(
               &_SomeoneLeave_default_instance_);
  }

  void Swap(SomeoneLeave* other);

  // implements Message ----------------------------------------------

  inline SomeoneLeave* New() const PROTOBUF_FINAL { return New(NULL); }

  SomeoneLeave* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SomeoneLeave& from);
  void MergeFrom(const SomeoneLeave& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SomeoneLeave* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // required uint64 time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:simplechat.SomeoneLeave)
 private:
  void set_has_user();
  void clear_has_user();
  void set_has_time();
  void clear_has_time();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::uint64 time_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListRoomRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.ListRoomRequest) */ {
 public:
  ListRoomRequest();
  virtual ~ListRoomRequest();

  ListRoomRequest(const ListRoomRequest& from);

  inline ListRoomRequest& operator=(const ListRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRoomRequest& default_instance();

  static inline const ListRoomRequest* internal_default_instance() {
    return reinterpret_cast<const ListRoomRequest*>(
               &_ListRoomRequest_default_instance_);
  }

  void Swap(ListRoomRequest* other);

  // implements Message ----------------------------------------------

  inline ListRoomRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRoomRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRoomRequest& from);
  void MergeFrom(const ListRoomRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRoomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // required string room = 2;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 2;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  #if LANG_CXX11
  void set_room(::std::string&& value);
  #endif
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // @@protoc_insertion_point(class_scope:simplechat.ListRoomRequest)
 private:
  void set_has_user();
  void clear_has_user();
  void set_has_room();
  void clear_has_room();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListRoomResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:simplechat.ListRoomResponse) */ {
 public:
  ListRoomResponse();
  virtual ~ListRoomResponse();

  ListRoomResponse(const ListRoomResponse& from);

  inline ListRoomResponse& operator=(const ListRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRoomResponse& default_instance();

  static inline const ListRoomResponse* internal_default_instance() {
    return reinterpret_cast<const ListRoomResponse*>(
               &_ListRoomResponse_default_instance_);
  }

  void Swap(ListRoomResponse* other);

  // implements Message ----------------------------------------------

  inline ListRoomResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRoomResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRoomResponse& from);
  void MergeFrom(const ListRoomResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRoomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string user = 3;
  int user_size() const;
  void clear_user();
  static const int kUserFieldNumber = 3;
  const ::std::string& user(int index) const;
  ::std::string* mutable_user(int index);
  void set_user(int index, const ::std::string& value);
  void set_user(int index, const char* value);
  void set_user(int index, const char* value, size_t size);
  ::std::string* add_user();
  void add_user(const ::std::string& value);
  void add_user(const char* value);
  void add_user(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& user() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user();

  // required string room = 1;
  bool has_room() const;
  void clear_room();
  static const int kRoomFieldNumber = 1;
  const ::std::string& room() const;
  void set_room(const ::std::string& value);
  #if LANG_CXX11
  void set_room(::std::string&& value);
  #endif
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  ::std::string* mutable_room();
  ::std::string* release_room();
  void set_allocated_room(::std::string* room);

  // required int32 onlines = 2;
  bool has_onlines() const;
  void clear_onlines();
  static const int kOnlinesFieldNumber = 2;
  ::google::protobuf::int32 onlines() const;
  void set_onlines(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:simplechat.ListRoomResponse)
 private:
  void set_has_room();
  void clear_has_room();
  void set_has_onlines();
  void clear_has_onlines();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_;
  ::google::protobuf::internal::ArenaStringPtr room_;
  ::google::protobuf::int32 onlines_;
  friend struct  protobuf_SimpleChat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeatRequest

// required string user = 1;
inline bool HeartBeatRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& HeartBeatRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.HeartBeatRequest.user)
  return user_.GetNoArena();
}
inline void HeartBeatRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.HeartBeatRequest.user)
}
#if LANG_CXX11
inline void HeartBeatRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.HeartBeatRequest.user)
}
#endif
inline void HeartBeatRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.HeartBeatRequest.user)
}
inline void HeartBeatRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.HeartBeatRequest.user)
}
inline ::std::string* HeartBeatRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.HeartBeatRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.HeartBeatRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.HeartBeatRequest.user)
}

// -------------------------------------------------------------------

// HeartBeatResponse

// required .simplechat.UserStatus status = 1;
inline bool HeartBeatResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::simplechat::UserStatus HeartBeatResponse::status() const {
  // @@protoc_insertion_point(field_get:simplechat.HeartBeatResponse.status)
  return static_cast< ::simplechat::UserStatus >(status_);
}
inline void HeartBeatResponse::set_status(::simplechat::UserStatus value) {
  assert(::simplechat::UserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:simplechat.HeartBeatResponse.status)
}

// required int32 onlines = 2;
inline bool HeartBeatResponse::has_onlines() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatResponse::set_has_onlines() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatResponse::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatResponse::clear_onlines() {
  onlines_ = 0;
  clear_has_onlines();
}
inline ::google::protobuf::int32 HeartBeatResponse::onlines() const {
  // @@protoc_insertion_point(field_get:simplechat.HeartBeatResponse.onlines)
  return onlines_;
}
inline void HeartBeatResponse::set_onlines(::google::protobuf::int32 value) {
  set_has_onlines();
  onlines_ = value;
  // @@protoc_insertion_point(field_set:simplechat.HeartBeatResponse.onlines)
}

// -------------------------------------------------------------------

// CommonResponse

// required .simplechat.ErrorCode code = 1;
inline bool CommonResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::simplechat::ErrorCode CommonResponse::code() const {
  // @@protoc_insertion_point(field_get:simplechat.CommonResponse.code)
  return static_cast< ::simplechat::ErrorCode >(code_);
}
inline void CommonResponse::set_code(::simplechat::ErrorCode value) {
  assert(::simplechat::ErrorCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:simplechat.CommonResponse.code)
}

// optional string message = 2;
inline bool CommonResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& CommonResponse::message() const {
  // @@protoc_insertion_point(field_get:simplechat.CommonResponse.message)
  return message_.GetNoArena();
}
inline void CommonResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.CommonResponse.message)
}
#if LANG_CXX11
inline void CommonResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.CommonResponse.message)
}
#endif
inline void CommonResponse::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.CommonResponse.message)
}
inline void CommonResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.CommonResponse.message)
}
inline ::std::string* CommonResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.CommonResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommonResponse::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.CommonResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommonResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.CommonResponse.message)
}

// -------------------------------------------------------------------

// LoginRequest

// required string user = 1;
inline bool LoginRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& LoginRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginRequest.user)
  return user_.GetNoArena();
}
inline void LoginRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LoginRequest.user)
}
#if LANG_CXX11
inline void LoginRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LoginRequest.user)
}
#endif
inline void LoginRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LoginRequest.user)
}
inline void LoginRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LoginRequest.user)
}
inline ::std::string* LoginRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.LoginRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.LoginRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LoginRequest.user)
}

// required string room = 2;
inline bool LoginRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
inline const ::std::string& LoginRequest::room() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginRequest.room)
  return room_.GetNoArena();
}
inline void LoginRequest::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LoginRequest.room)
}
#if LANG_CXX11
inline void LoginRequest::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LoginRequest.room)
}
#endif
inline void LoginRequest::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LoginRequest.room)
}
inline void LoginRequest::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LoginRequest.room)
}
inline ::std::string* LoginRequest::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.LoginRequest.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.LoginRequest.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LoginRequest.room)
}

// -------------------------------------------------------------------

// LoginResponse

// required .simplechat.ErrorCode code = 1;
inline bool LoginResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::simplechat::ErrorCode LoginResponse::code() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginResponse.code)
  return static_cast< ::simplechat::ErrorCode >(code_);
}
inline void LoginResponse::set_code(::simplechat::ErrorCode value) {
  assert(::simplechat::ErrorCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:simplechat.LoginResponse.code)
}

// required string message = 2;
inline bool LoginResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& LoginResponse::message() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginResponse.message)
  return message_.GetNoArena();
}
inline void LoginResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LoginResponse.message)
}
#if LANG_CXX11
inline void LoginResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LoginResponse.message)
}
#endif
inline void LoginResponse::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LoginResponse.message)
}
inline void LoginResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LoginResponse.message)
}
inline ::std::string* LoginResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.LoginResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.LoginResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LoginResponse.message)
}

// required int32 onlines = 3;
inline bool LoginResponse::has_onlines() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResponse::set_has_onlines() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResponse::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResponse::clear_onlines() {
  onlines_ = 0;
  clear_has_onlines();
}
inline ::google::protobuf::int32 LoginResponse::onlines() const {
  // @@protoc_insertion_point(field_get:simplechat.LoginResponse.onlines)
  return onlines_;
}
inline void LoginResponse::set_onlines(::google::protobuf::int32 value) {
  set_has_onlines();
  onlines_ = value;
  // @@protoc_insertion_point(field_set:simplechat.LoginResponse.onlines)
}

// -------------------------------------------------------------------

// LogoutRequest

// required string user = 1;
inline bool LogoutRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& LogoutRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.LogoutRequest.user)
  return user_.GetNoArena();
}
inline void LogoutRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LogoutRequest.user)
}
#if LANG_CXX11
inline void LogoutRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LogoutRequest.user)
}
#endif
inline void LogoutRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LogoutRequest.user)
}
inline void LogoutRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LogoutRequest.user)
}
inline ::std::string* LogoutRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.LogoutRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.LogoutRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LogoutRequest.user)
}

// -------------------------------------------------------------------

// LogoutResponse

// required .simplechat.ErrorCode code = 1;
inline bool LogoutResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::simplechat::ErrorCode LogoutResponse::code() const {
  // @@protoc_insertion_point(field_get:simplechat.LogoutResponse.code)
  return static_cast< ::simplechat::ErrorCode >(code_);
}
inline void LogoutResponse::set_code(::simplechat::ErrorCode value) {
  assert(::simplechat::ErrorCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:simplechat.LogoutResponse.code)
}

// optional string message = 2;
inline bool LogoutResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& LogoutResponse::message() const {
  // @@protoc_insertion_point(field_get:simplechat.LogoutResponse.message)
  return message_.GetNoArena();
}
inline void LogoutResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.LogoutResponse.message)
}
#if LANG_CXX11
inline void LogoutResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.LogoutResponse.message)
}
#endif
inline void LogoutResponse::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.LogoutResponse.message)
}
inline void LogoutResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.LogoutResponse.message)
}
inline ::std::string* LogoutResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.LogoutResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutResponse::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.LogoutResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.LogoutResponse.message)
}

// -------------------------------------------------------------------

// MessageSendRequest

// required string user = 1;
inline bool MessageSendRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageSendRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageSendRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageSendRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& MessageSendRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendRequest.user)
  return user_.GetNoArena();
}
inline void MessageSendRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageSendRequest.user)
}
#if LANG_CXX11
inline void MessageSendRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageSendRequest.user)
}
#endif
inline void MessageSendRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageSendRequest.user)
}
inline void MessageSendRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageSendRequest.user)
}
inline ::std::string* MessageSendRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageSendRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageSendRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.MessageSendRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageSendRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageSendRequest.user)
}

// required string room = 2;
inline bool MessageSendRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageSendRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageSendRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageSendRequest::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
inline const ::std::string& MessageSendRequest::room() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendRequest.room)
  return room_.GetNoArena();
}
inline void MessageSendRequest::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageSendRequest.room)
}
#if LANG_CXX11
inline void MessageSendRequest::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageSendRequest.room)
}
#endif
inline void MessageSendRequest::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageSendRequest.room)
}
inline void MessageSendRequest::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageSendRequest.room)
}
inline ::std::string* MessageSendRequest::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageSendRequest.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageSendRequest::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.MessageSendRequest.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageSendRequest::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageSendRequest.room)
}

// required string message = 3;
inline bool MessageSendRequest::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageSendRequest::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageSendRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageSendRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& MessageSendRequest::message() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendRequest.message)
  return message_.GetNoArena();
}
inline void MessageSendRequest::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageSendRequest.message)
}
#if LANG_CXX11
inline void MessageSendRequest::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageSendRequest.message)
}
#endif
inline void MessageSendRequest::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageSendRequest.message)
}
inline void MessageSendRequest::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageSendRequest.message)
}
inline ::std::string* MessageSendRequest::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageSendRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageSendRequest::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.MessageSendRequest.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageSendRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageSendRequest.message)
}

// required uint64 time = 4;
inline bool MessageSendRequest::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageSendRequest::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageSendRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageSendRequest::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 MessageSendRequest::time() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendRequest.time)
  return time_;
}
inline void MessageSendRequest::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:simplechat.MessageSendRequest.time)
}

// -------------------------------------------------------------------

// MessageSendResponse

// required .simplechat.ErrorCode code = 1;
inline bool MessageSendResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageSendResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageSendResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageSendResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::simplechat::ErrorCode MessageSendResponse::code() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendResponse.code)
  return static_cast< ::simplechat::ErrorCode >(code_);
}
inline void MessageSendResponse::set_code(::simplechat::ErrorCode value) {
  assert(::simplechat::ErrorCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:simplechat.MessageSendResponse.code)
}

// optional string message = 2;
inline bool MessageSendResponse::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageSendResponse::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageSendResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageSendResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& MessageSendResponse::message() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageSendResponse.message)
  return message_.GetNoArena();
}
inline void MessageSendResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageSendResponse.message)
}
#if LANG_CXX11
inline void MessageSendResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageSendResponse.message)
}
#endif
inline void MessageSendResponse::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageSendResponse.message)
}
inline void MessageSendResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageSendResponse.message)
}
inline ::std::string* MessageSendResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageSendResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageSendResponse::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.MessageSendResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageSendResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageSendResponse.message)
}

// -------------------------------------------------------------------

// MessageRecv

// required string sender = 1;
inline bool MessageRecv::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageRecv::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageRecv::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageRecv::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender();
}
inline const ::std::string& MessageRecv::sender() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageRecv.sender)
  return sender_.GetNoArena();
}
inline void MessageRecv::set_sender(const ::std::string& value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageRecv.sender)
}
#if LANG_CXX11
inline void MessageRecv::set_sender(::std::string&& value) {
  set_has_sender();
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageRecv.sender)
}
#endif
inline void MessageRecv::set_sender(const char* value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageRecv.sender)
}
inline void MessageRecv::set_sender(const char* value, size_t size) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageRecv.sender)
}
inline ::std::string* MessageRecv::mutable_sender() {
  set_has_sender();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageRecv.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageRecv::release_sender() {
  // @@protoc_insertion_point(field_release:simplechat.MessageRecv.sender)
  clear_has_sender();
  return sender_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRecv::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageRecv.sender)
}

// required string room = 2;
inline bool MessageRecv::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessageRecv::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessageRecv::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessageRecv::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
inline const ::std::string& MessageRecv::room() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageRecv.room)
  return room_.GetNoArena();
}
inline void MessageRecv::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageRecv.room)
}
#if LANG_CXX11
inline void MessageRecv::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageRecv.room)
}
#endif
inline void MessageRecv::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageRecv.room)
}
inline void MessageRecv::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageRecv.room)
}
inline ::std::string* MessageRecv::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageRecv.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageRecv::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.MessageRecv.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRecv::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageRecv.room)
}

// required string message = 3;
inline bool MessageRecv::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessageRecv::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessageRecv::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessageRecv::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& MessageRecv::message() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageRecv.message)
  return message_.GetNoArena();
}
inline void MessageRecv::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.MessageRecv.message)
}
#if LANG_CXX11
inline void MessageRecv::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.MessageRecv.message)
}
#endif
inline void MessageRecv::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.MessageRecv.message)
}
inline void MessageRecv::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.MessageRecv.message)
}
inline ::std::string* MessageRecv::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:simplechat.MessageRecv.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageRecv::release_message() {
  // @@protoc_insertion_point(field_release:simplechat.MessageRecv.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRecv::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:simplechat.MessageRecv.message)
}

// required uint64 time = 4;
inline bool MessageRecv::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageRecv::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageRecv::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageRecv::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 MessageRecv::time() const {
  // @@protoc_insertion_point(field_get:simplechat.MessageRecv.time)
  return time_;
}
inline void MessageRecv::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:simplechat.MessageRecv.time)
}

// -------------------------------------------------------------------

// SomeoneEnter

// required string user = 1;
inline bool SomeoneEnter::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SomeoneEnter::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SomeoneEnter::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SomeoneEnter::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& SomeoneEnter::user() const {
  // @@protoc_insertion_point(field_get:simplechat.SomeoneEnter.user)
  return user_.GetNoArena();
}
inline void SomeoneEnter::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.SomeoneEnter.user)
}
#if LANG_CXX11
inline void SomeoneEnter::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.SomeoneEnter.user)
}
#endif
inline void SomeoneEnter::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.SomeoneEnter.user)
}
inline void SomeoneEnter::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.SomeoneEnter.user)
}
inline ::std::string* SomeoneEnter::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.SomeoneEnter.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SomeoneEnter::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.SomeoneEnter.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SomeoneEnter::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.SomeoneEnter.user)
}

// required uint64 time = 2;
inline bool SomeoneEnter::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SomeoneEnter::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SomeoneEnter::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SomeoneEnter::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 SomeoneEnter::time() const {
  // @@protoc_insertion_point(field_get:simplechat.SomeoneEnter.time)
  return time_;
}
inline void SomeoneEnter::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:simplechat.SomeoneEnter.time)
}

// -------------------------------------------------------------------

// SomeoneLeave

// required string user = 1;
inline bool SomeoneLeave::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SomeoneLeave::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SomeoneLeave::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SomeoneLeave::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& SomeoneLeave::user() const {
  // @@protoc_insertion_point(field_get:simplechat.SomeoneLeave.user)
  return user_.GetNoArena();
}
inline void SomeoneLeave::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.SomeoneLeave.user)
}
#if LANG_CXX11
inline void SomeoneLeave::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.SomeoneLeave.user)
}
#endif
inline void SomeoneLeave::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.SomeoneLeave.user)
}
inline void SomeoneLeave::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.SomeoneLeave.user)
}
inline ::std::string* SomeoneLeave::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.SomeoneLeave.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SomeoneLeave::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.SomeoneLeave.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SomeoneLeave::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.SomeoneLeave.user)
}

// required uint64 time = 2;
inline bool SomeoneLeave::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SomeoneLeave::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SomeoneLeave::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SomeoneLeave::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 SomeoneLeave::time() const {
  // @@protoc_insertion_point(field_get:simplechat.SomeoneLeave.time)
  return time_;
}
inline void SomeoneLeave::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:simplechat.SomeoneLeave.time)
}

// -------------------------------------------------------------------

// ListRoomRequest

// required string user = 1;
inline bool ListRoomRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListRoomRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListRoomRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListRoomRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& ListRoomRequest::user() const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomRequest.user)
  return user_.GetNoArena();
}
inline void ListRoomRequest::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.ListRoomRequest.user)
}
#if LANG_CXX11
inline void ListRoomRequest::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.ListRoomRequest.user)
}
#endif
inline void ListRoomRequest::set_user(const char* value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.ListRoomRequest.user)
}
inline void ListRoomRequest::set_user(const char* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.ListRoomRequest.user)
}
inline ::std::string* ListRoomRequest::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:simplechat.ListRoomRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListRoomRequest::release_user() {
  // @@protoc_insertion_point(field_release:simplechat.ListRoomRequest.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListRoomRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:simplechat.ListRoomRequest.user)
}

// required string room = 2;
inline bool ListRoomRequest::has_room() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListRoomRequest::set_has_room() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListRoomRequest::clear_has_room() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListRoomRequest::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
inline const ::std::string& ListRoomRequest::room() const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomRequest.room)
  return room_.GetNoArena();
}
inline void ListRoomRequest::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.ListRoomRequest.room)
}
#if LANG_CXX11
inline void ListRoomRequest::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.ListRoomRequest.room)
}
#endif
inline void ListRoomRequest::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.ListRoomRequest.room)
}
inline void ListRoomRequest::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.ListRoomRequest.room)
}
inline ::std::string* ListRoomRequest::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.ListRoomRequest.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListRoomRequest::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.ListRoomRequest.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListRoomRequest::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.ListRoomRequest.room)
}

// -------------------------------------------------------------------

// ListRoomResponse

// required string room = 1;
inline bool ListRoomResponse::has_room() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListRoomResponse::set_has_room() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListRoomResponse::clear_has_room() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListRoomResponse::clear_room() {
  room_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room();
}
inline const ::std::string& ListRoomResponse::room() const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomResponse.room)
  return room_.GetNoArena();
}
inline void ListRoomResponse::set_room(const ::std::string& value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:simplechat.ListRoomResponse.room)
}
#if LANG_CXX11
inline void ListRoomResponse::set_room(::std::string&& value) {
  set_has_room();
  room_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:simplechat.ListRoomResponse.room)
}
#endif
inline void ListRoomResponse::set_room(const char* value) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:simplechat.ListRoomResponse.room)
}
inline void ListRoomResponse::set_room(const char* value, size_t size) {
  set_has_room();
  room_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:simplechat.ListRoomResponse.room)
}
inline ::std::string* ListRoomResponse::mutable_room() {
  set_has_room();
  // @@protoc_insertion_point(field_mutable:simplechat.ListRoomResponse.room)
  return room_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListRoomResponse::release_room() {
  // @@protoc_insertion_point(field_release:simplechat.ListRoomResponse.room)
  clear_has_room();
  return room_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListRoomResponse::set_allocated_room(::std::string* room) {
  if (room != NULL) {
    set_has_room();
  } else {
    clear_has_room();
  }
  room_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room);
  // @@protoc_insertion_point(field_set_allocated:simplechat.ListRoomResponse.room)
}

// required int32 onlines = 2;
inline bool ListRoomResponse::has_onlines() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListRoomResponse::set_has_onlines() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListRoomResponse::clear_has_onlines() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListRoomResponse::clear_onlines() {
  onlines_ = 0;
  clear_has_onlines();
}
inline ::google::protobuf::int32 ListRoomResponse::onlines() const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomResponse.onlines)
  return onlines_;
}
inline void ListRoomResponse::set_onlines(::google::protobuf::int32 value) {
  set_has_onlines();
  onlines_ = value;
  // @@protoc_insertion_point(field_set:simplechat.ListRoomResponse.onlines)
}

// repeated string user = 3;
inline int ListRoomResponse::user_size() const {
  return user_.size();
}
inline void ListRoomResponse::clear_user() {
  user_.Clear();
}
inline const ::std::string& ListRoomResponse::user(int index) const {
  // @@protoc_insertion_point(field_get:simplechat.ListRoomResponse.user)
  return user_.Get(index);
}
inline ::std::string* ListRoomResponse::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:simplechat.ListRoomResponse.user)
  return user_.Mutable(index);
}
inline void ListRoomResponse::set_user(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:simplechat.ListRoomResponse.user)
  user_.Mutable(index)->assign(value);
}
inline void ListRoomResponse::set_user(int index, const char* value) {
  user_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:simplechat.ListRoomResponse.user)
}
inline void ListRoomResponse::set_user(int index, const char* value, size_t size) {
  user_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:simplechat.ListRoomResponse.user)
}
inline ::std::string* ListRoomResponse::add_user() {
  // @@protoc_insertion_point(field_add_mutable:simplechat.ListRoomResponse.user)
  return user_.Add();
}
inline void ListRoomResponse::add_user(const ::std::string& value) {
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:simplechat.ListRoomResponse.user)
}
inline void ListRoomResponse::add_user(const char* value) {
  user_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:simplechat.ListRoomResponse.user)
}
inline void ListRoomResponse::add_user(const char* value, size_t size) {
  user_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:simplechat.ListRoomResponse.user)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListRoomResponse::user() const {
  // @@protoc_insertion_point(field_list:simplechat.ListRoomResponse.user)
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListRoomResponse::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:simplechat.ListRoomResponse.user)
  return &user_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace simplechat

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::simplechat::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simplechat::MessageType>() {
  return ::simplechat::MessageType_descriptor();
}
template <> struct is_proto_enum< ::simplechat::ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simplechat::ErrorCode>() {
  return ::simplechat::ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::simplechat::UserStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::simplechat::UserStatus>() {
  return ::simplechat::UserStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SimpleChat_2eproto__INCLUDED
